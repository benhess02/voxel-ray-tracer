(()=>{"use strict";var e={658:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.multiplyVec=n.rotateZ=n.rotateY=n.rotateX=n.reset=n.create=void 0,n.create=function(){return[1,0,0,0,1,0,0,0,1]},n.reset=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e},n.rotateX=function(e,n){var t=Math.sin(n),r=Math.cos(n),o=e[0],i=e[1],a=e[2],c=e[3],d=e[4],u=e[5],_=e[6],l=e[7],s=e[8];return e[0]=o,e[1]=r*i-t*a,e[2]=t*i+r*a,e[3]=c,e[4]=r*d-t*u,e[5]=t*d+r*u,e[6]=_,e[7]=r*l-t*s,e[8]=t*l+r*s,e},n.rotateY=function(e,n){var t=Math.sin(n),r=Math.cos(n),o=e[0],i=e[1],a=e[2],c=e[3],d=e[4],u=e[5],_=e[6],l=e[7],s=e[8];return e[0]=r*o+t*a,e[1]=i,e[2]=-t*o+r*a,e[3]=r*c+t*u,e[4]=d,e[5]=-t*c+r*u,e[6]=r*_+t*s,e[7]=l,e[8]=-t*_+r*s,e},n.rotateZ=function(e,n){var t=Math.sin(n),r=Math.cos(n),o=e[0],i=e[1],a=e[2],c=e[3],d=e[4],u=e[5],_=e[6],l=e[7],s=e[8];return e[0]=r*o-t*i,e[1]=t*o+r*i,e[2]=a,e[3]=r*c-t*d,e[4]=t*c+r*d,e[5]=u,e[6]=r*_-t*l,e[7]=t*_+r*l,e[8]=s,e},n.multiplyVec=function(e,n){var t=n[0],r=n[1],o=n[2];return n[0]=t*e[0]+r*e[3]+o*e[6],n[1]=t*e[1]+r*e[4]+o*e[7],n[2]=t*e[2]+r*e[5]+o*e[8],n}},872:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.mag=n.magSq=n.addImm=n.add=n.set=n.create=void 0,n.create=function(e,n,t){return[e,n,t]},n.set=function(e,n,t,r){return e[0]=n,e[1]=t,e[2]=r,e},n.add=function(e,n){return e[0]+=n[0],e[1]+=n[1],e[2]+=n[2],e},n.addImm=function(e,n,t,r){return e[0]+=n,e[1]+=t,e[2]+=r,e},n.magSq=function(e){var n=e[0],t=e[1],r=e[2];return n*n+t*t+r*r},n.mag=function(e){var n=e[0],t=e[1],r=e[2];return Math.sqrt(n*n+t*t+r*r)}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={exports:{}};return e[r](i,i.exports,t),i.exports}(()=>{var e=t(658),n=t(872),r=document.getElementById("cvs"),o=r.getContext("webgl2");o.getExtension("EXT_color_buffer_float");var i,a,c,d,u,_,l,s,v,m,f,x,E,T,h,R=n.create(0,0,0),g=n.create(0,0,0),y=e.create(),p=0,A=0,U=0,P=[],S=0;function z(){var e=o.createTexture();return o.bindTexture(o.TEXTURE_2D,e),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_MAG_FILTER,o.NEAREST),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_MIN_FILTER,o.NEAREST),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_WRAP_S,o.CLAMP_TO_EDGE),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_WRAP_T,o.CLAMP_TO_EDGE),e}function D(e,n){var t=o.createShader(o.VERTEX_SHADER);if(o.shaderSource(t,e),o.compileShader(t),!o.getShaderParameter(t,o.COMPILE_STATUS))throw new Error("Failed to compile vertex shader: "+o.getShaderInfoLog(t));var r=o.createShader(o.FRAGMENT_SHADER);if(o.shaderSource(r,n),o.compileShader(r),!o.getShaderParameter(r,o.COMPILE_STATUS))throw new Error("Failed to compile fragment shader: "+o.getShaderInfoLog(r));var a=o.createProgram();if(o.attachShader(a,t),o.attachShader(a,r),o.linkProgram(a),o.deleteShader(t),o.deleteShader(r),!o.getProgramParameter(a,o.LINK_STATUS))throw new Error("Failed to link shader program: "+o.getProgramInfoLog(a));var c=o.getAttribLocation(a,"vPosition");return o.bindBuffer(o.ARRAY_BUFFER,i),o.vertexAttribPointer(c,2,o.FLOAT,!1,0,0),o.enableVertexAttribArray(c),a}function F(){r.width=r.clientWidth,r.height=r.clientHeight,o.viewport(0,0,r.width,r.height);var e=new Float32Array(r.width*r.height*4);o.bindTexture(o.TEXTURE_2D,T),o.texImage2D(o.TEXTURE_2D,0,o.RGBA32F,r.width,r.height,0,o.RGBA,o.FLOAT,e),o.bindTexture(o.TEXTURE_2D,h),o.texImage2D(o.TEXTURE_2D,0,o.RGBA32F,r.width,r.height,0,o.RGBA,o.FLOAT,e),S=0}document.addEventListener("keydown",(function(e){P.includes(e.key)||P.push(e.key)})),document.addEventListener("keyup",(function(e){var n=P.indexOf(e.key);n>=0&&P.splice(n,1)})),function(){i=o.createBuffer(),o.bindBuffer(o.ARRAY_BUFFER,i),o.bufferData(o.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,1,1,1,1,-1,1,-1,-1]),o.STATIC_DRAW);for(var e,n,t,r,R=new Uint8Array(16384),g=0;g<200;g++){var y=Math.floor(Math.random()*(R.length/4));R[4*y]=Math.floor(256*Math.random()),R[4*y+1]=Math.floor(256*Math.random()),R[4*y+2]=Math.floor(256*Math.random()),R[4*y+3]=255}e=o.RGBA,n=o.UNSIGNED_BYTE,t=R,r=o.createTexture(),o.bindTexture(o.TEXTURE_3D,r),o.texParameteri(o.TEXTURE_3D,o.TEXTURE_MAG_FILTER,o.NEAREST),o.texParameteri(o.TEXTURE_3D,o.TEXTURE_MIN_FILTER,o.NEAREST),o.texParameteri(o.TEXTURE_3D,o.TEXTURE_WRAP_S,o.CLAMP_TO_EDGE),o.texParameteri(o.TEXTURE_3D,o.TEXTURE_WRAP_T,o.CLAMP_TO_EDGE),o.texParameteri(o.TEXTURE_3D,o.TEXTURE_WRAP_R,o.CLAMP_TO_EDGE),o.texImage3D(o.TEXTURE_3D,0,e,16,16,16,0,e,n,t),a=r,c=D("#version 300 es\nuniform vec2 outputSize;\nin vec4 vPosition;\nout vec2 cameraPoint;\nout vec2 uv;\nvoid main() {\n    float aspectRatio = float(outputSize.x) / float(outputSize.y);\n    cameraPoint = vec2(vPosition.x * aspectRatio, vPosition.y);\n    uv = (vPosition.xy + 1.0) / 2.0;\n    gl_Position = vPosition;\n}","#version 300 es\nprecision highp float;\nprecision highp sampler3D;\nuniform vec3 position;\nuniform mat3x3 rotation;\nuniform sampler3D voxelColors;\nuniform vec2 outputSize;\nuniform uint rngSeed;\nuniform sampler2D frame;\nuniform int frameCount;\nin vec2 cameraPoint;\nin vec2 uv;\nout vec4 color;\n\nuint rng_state;\n\nuint pcg_hash(uint n)\n{\n    uint state = n * 747796405u + 2891336453u;\n    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n    return (word >> 22u) ^ word;\n}\n\nuint rand_uint() {\n    rng_state = pcg_hash(rng_state);\n    return rng_state;\n}\n\nfloat rand_float() {\n    return float(rand_uint()) / float(4294967295u);\n}\n\nvec2 random_in_circle() {\n    float angle = rand_float() * 6.28318530718;\n    return vec2(cos(angle), sin(angle)) * sqrt(rand_float());\n}\n\nvec3 random_in_sphere() {\n    float z = rand_float() * 2.0 - 1.0;\n    float r = sqrt(1.0 - z * z);\n    return vec3(random_in_circle() * r, z);\n}\n\nvoid main() {\n    rng_state = rngSeed + uint(gl_FragCoord.y) * uint(outputSize.x) + uint(gl_FragCoord.x);\n\n    vec3 direction = normalize(rotation * vec3(cameraPoint.x, cameraPoint.y, 1.5));\n    vec3 ray_pos = position;\n    ivec3 ray_vox = ivec3(position);\n    vec4 voxel_color = texelFetch(voxelColors, ray_vox, 0);\n\n    vec3 multiplier = vec3(1.0, 1.0, 1.0);\n    vec3 output_color = vec3(0.0, 0.0, 0.0);\n\n    for(int i = 0; i < 48; i++) {\n        int next_x = ray_vox.x + (direction.x < 0.0 ? -1 : 1);\n        int next_y = ray_vox.y + (direction.y < 0.0 ? -1 : 1);\n        int next_z = ray_vox.z + (direction.z < 0.0 ? -1 : 1);\n\n        int edge_x = ray_vox.x + (direction.x < 0.0 ? 0 : 1);\n        int edge_y = ray_vox.y + (direction.y < 0.0 ? 0 : 1);\n        int edge_z = ray_vox.z + (direction.z < 0.0 ? 0 : 1);\n    \n        float dist_x = abs((float(edge_x) - ray_pos.x) / direction.x);\n        float dist_y = abs((float(edge_y) - ray_pos.y) / direction.y);\n        float dist_z = abs((float(edge_z) - ray_pos.z) / direction.z);\n    \n        ivec3 next_vox = ray_vox;\n        float dist;\n        vec3 normal = vec3(0.0, 0.0, 0.0);\n\n        if(dist_x <= dist_y && dist_x <= dist_z) {\n            ray_pos += direction * dist_x;\n            dist = dist_x;\n            next_vox.x += direction.x < 0.0 ? -1 : 1;\n            normal.x = direction.x < 0.0 ? 1.0 : -1.0;\n        }\n        else if(dist_y <= dist_x && dist_y <= dist_z) {\n            ray_pos += direction * dist_y;\n            dist = dist_y;\n            next_vox.y += direction.y < 0.0 ? -1 : 1;\n            normal.y = direction.y < 0.0 ? 1.0 : -1.0;\n        }\n        else {\n            ray_pos += direction * dist_z;\n            dist = dist_z;\n            next_vox.z += direction.z < 0.0 ? -1 : 1;\n            normal.z = direction.z < 0.0 ? 1.0 : -1.0;\n        }\n\n        if(next_vox.x < 0 || next_vox.y < 0 || next_vox.z < 0\n            || next_vox.x > 15 || next_vox.y > 15 || next_vox.z > 15) {\n            output_color = multiplier;\n            break;\n        }\n\n        vec4 next_voxel_color = texelFetch(voxelColors, next_vox, 0);\n\n        if(next_voxel_color.w != 0.0) {\n            if(rand_float() < 0.01) {\n                direction = normalize(direction + -2.0 * normal * dot(direction, normal));\n            }\n            else {\n                multiplier *= pow(next_voxel_color.xyz, vec3(2.2, 2.2, 2.2));\n                direction = normalize(normal + random_in_sphere());\n            }\n        }\n        else {\n            ray_vox = next_vox;\n            voxel_color = next_voxel_color;\n        }\n    }\n\n    vec3 old_color = texture(frame, uv).xyz;\n    color = vec4(old_color + (output_color - old_color) * (1.0 / float(frameCount + 1)), 1.0);\n}"),d=o.getUniformLocation(c,"outputSize"),u=o.getUniformLocation(c,"position"),_=o.getUniformLocation(c,"rotation"),l=o.getUniformLocation(c,"voxelColors"),s=o.getUniformLocation(c,"rngSeed"),v=o.getUniformLocation(c,"frame"),m=o.getUniformLocation(c,"frameCount"),f=D("#version 300 es\nin vec4 vPosition;\nout vec2 uv;\nvoid main() {\n    uv = (vPosition.xy + 1.0) / 2.0;\n    gl_Position = vPosition;\n}","#version 300 es\nprecision highp float;\nprecision highp sampler2D;\nuniform sampler2D frame;\nin vec2 uv;\nout vec4 color;\nvoid main() {\n    vec3 c = texture(frame, uv).xyz;\n    color = vec4(pow(c.x, 1.0 / 2.2), pow(c.y, 1.0 / 2.2), pow(c.z, 1.0 / 2.2), 1.0);\n}"),x=o.getUniformLocation(f,"frame"),E=o.createFramebuffer(),T=z(),h=z()}(),window.addEventListener("resize",(function(){return F()})),F(),function t(i){requestAnimationFrame((function(e){return t()})),n.set(g,0,0,0),P.includes("w")&&(n.addImm(g,0,0,.05),S=0),P.includes("s")&&(n.addImm(g,0,0,-.05),S=0),P.includes("a")&&(n.addImm(g,-.05,0,0),S=0),P.includes("d")&&(n.addImm(g,.05,0,0),S=0),P.includes("Shift")&&(n.addImm(g,0,-.05,0),S=0),P.includes(" ")&&(n.addImm(g,0,.05,0),S=0),P.includes("q")&&(U-=.02,S=0),P.includes("e")&&(U+=.02,S=0),P.includes("r")&&(p-=.02,S=0),P.includes("f")&&(p+=.02,S=0),P.includes("c")&&(A-=.02,S=0),P.includes("z")&&(A+=.02,S=0),e.reset(y),e.rotateZ(y,A),e.rotateX(y,p),e.rotateY(y,U),e.multiplyVec(y,g),n.add(R,g),o.useProgram(c),o.uniform2f(d,r.width,r.height),o.uniform3fv(u,R),o.uniformMatrix3fv(_,!1,y),o.activeTexture(o.TEXTURE0),o.bindTexture(o.TEXTURE_2D,h),o.uniform1i(v,0),o.activeTexture(o.TEXTURE1),o.bindTexture(o.TEXTURE_3D,a),o.uniform1i(l,1),o.uniform1i(m,S);var z=Math.floor(1e9*Math.random());o.uniform1ui(s,z),o.bindFramebuffer(o.FRAMEBUFFER,E),o.framebufferTexture2D(o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,T,0),o.drawArrays(o.TRIANGLES,0,6),o.useProgram(f),o.activeTexture(o.TEXTURE0),o.bindTexture(o.TEXTURE_2D,T),o.uniform1i(x,0),o.bindFramebuffer(o.FRAMEBUFFER,null),o.drawArrays(o.TRIANGLES,0,6);var D=T;T=h,h=D,S+=1}()})()})();